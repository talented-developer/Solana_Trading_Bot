import BN from 'bn.js';

export interface Metadata {
  mint: Mint;
  model: string;
  updateAuthorityAddress: string;
  json: MetadataJson;
  jsonLoaded: boolean;
  name: string;
  symbol: string;
  uri: string;
  isMutable: boolean;
  primarySaleHappened: boolean;
  sellerFeeBasisPoints: number;
  editionNonce: number;
  creators: Creator[];
  tokenStandard: number;
  collection: Collection | null;
  collectionDetails: CollectionDetails | null;
  uses: Uses | null;
  programmableConfig: ProgrammableConfig | null;
  address: string;
  metadataAddress: string;
  marketCap?: number;
  liquidity?: number;
  liquidityLock?: number;
  top10holdersPercentage?: number;
  numberOfHolders?: number;
  devWalletValue?: number;
  pricePerToken?: number;
  tokenAge?: string;
  priceChange?: string;
  creatorPercentage?: number;
}

export interface PublicKeyWrapper {
  _bn: BN;
}

export interface MetadataJson {
  name: string;
  symbol: string;
  description: string;
  image: string;
  showName: boolean;
  createdOn: string;
  twitter?: string;
  telegram?: string;
  website?: string;
}

export interface Creator {
  address: string;
  verified: boolean;
  share: number;
}

export interface Collection {
  verified: boolean;
  key: string;
}

export interface CollectionDetails {
  version: string;
  size: number;
}

export interface Uses {
  useMethod: string;
  remaining: number;
  total: number;
}

export interface ProgrammableConfig {
  ruleSet: string;
}

export interface PdaWrapper {
  _bn: BN;
  bump: number;
}

export interface Mint {
  model: string;
  address: string;
  mintAuthorityAddress: string | null;
  freezeAuthorityAddress: string | null;
  decimals: number;
  supply: Supply;
  isWrappedSol: boolean;
  currency: Currency;
}

export interface Supply {
  basisPoints: string;
  currency: Currency;
}

export interface Currency {
  symbol: string;
  decimals: number;
  namespace: string;
}


////////////////////////////////
////////////////////////////////
////////////////////////////////
//////AUTOGENERATED TYPES///////
////////////////////////////////
////////////////////////////////
////////////////////////////////

export interface RugCheckMetadata {
  mint: string;
  tokenProgram: string;
  creator: any;
  token: Token;
  token_extensions: any;
  tokenMeta: TokenMeta;
  topHolders: any[];
  freezeAuthority: any;
  mintAuthority: any;
  risks: Risk[];
  score: number;
  fileMeta: FileMeta;
  lockerOwners: LockerOwners;
  lockers: Lockers;
  lpLockers: any;
  markets: Market[];
  totalMarketLiquidity: number;
  totalLPProviders: number;
  rugged: boolean;
  tokenType: string;
  transferFee: TransferFee;
  events: any[];
  detectedAt: string;
}

export interface Token {
  mintAuthority: any;
  supply: number;
  decimals: number;
  isInitialized: boolean;
  freezeAuthority: any;
}

export interface TokenMeta {
  name: string;
  symbol: string;
  uri: string;
  mutable: boolean;
  updateAuthority: string;
}

export interface Risk {
  name: string;
  value: string;
  description: string;
  score: number;
  level: string;
}

export interface FileMeta {
  description: string;
  name: string;
  symbol: string;
  image: string;
}

export interface LockerOwners {
}

export interface Lockers {
}

export interface Market {
  pubkey: string;
  marketType: string;
  mintA: string;
  mintB: string;
  mintLP: string;
  liquidityA: string;
  liquidityB: string;
  mintAAccount: MintAaccount;
  mintBAccount: MintBaccount;
  mintLPAccount: MintLpaccount;
  liquidityAAccount: LiquidityAaccount;
  liquidityBAccount: LiquidityBaccount;
  lp: Lp;
}

export interface MintAaccount {
  mintAuthority?: string;
  supply?: number;
  decimals?: number;
  isInitialized?: boolean;
  freezeAuthority: any;
}

export interface MintBaccount {
  mintAuthority?: string;
  supply?: number;
  decimals?: number;
  isInitialized?: boolean;
  freezeAuthority?: string;
}

export interface MintLpaccount {
  mintAuthority?: string;
  supply?: number;
  decimals?: number;
  isInitialized?: boolean;
  freezeAuthority: any;
}

export interface LiquidityAaccount {
  mint?: string;
  owner?: string;
  amount?: number;
  delegate: any;
  state?: number;
  delegatedAmount?: number;
  closeAuthority: any;
}

export interface LiquidityBaccount {
  mint?: string;
  owner?: string;
  amount?: number;
  delegate: any;
  state?: number;
  delegatedAmount?: number;
  closeAuthority: any;
}

export interface Lp {
  baseMint: string;
  quoteMint: string;
  lpMint: string;
  quotePrice: number;
  basePrice: number;
  base: number;
  quote: number;
  reserveSupply: number;
  currentSupply: number;
  quoteUSD: number;
  baseUSD: number;
  pctReserve: number;
  pctSupply: number;
  holders?: Holder[];
  totalTokensUnlocked: number;
  tokenSupply: number;
  lpLocked: number;
  lpUnlocked: number;
  lpLockedPct: number;
  lpLockedUSD: number;
  lpMaxSupply: number;
  lpCurrentSupply: number;
  lpTotalSupply: number;
}

export interface Holder {
  address: string;
  amount: number;
  decimals: number;
  pct: number;
  uiAmount: number;
  uiAmountString: string;
  owner: string;
  insider: boolean;
}

export interface TransferFee {
  pct: number;
  maxAmount: number;
  authority: string;
}